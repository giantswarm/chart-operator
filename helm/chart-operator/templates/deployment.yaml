apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ tpl .Values.resource.default.name  . }}
  namespace: {{ tpl .Values.resource.default.namespace . }}
  labels:
    {{- include "chart-operator.labels" . | nindent 4 }}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      {{- include "chart-operator.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        app.giantswarm.io/config-checksum: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum | quote }}
      labels:
        {{- include "chart-operator.labels" . | nindent 8 }}
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: role
                operator: In
                values:
                - master
      volumes:
      - name:  {{ tpl .Values.resource.default.name  . }}-configmap
        configMap:
          name: {{ tpl .Values.resource.default.name  . }}
          items:
          - key: config.yaml
            path: config.yaml
      priorityClassName: giantswarm-critical
      serviceAccountName: {{ tpl .Values.resource.default.name  . }}
      {{- if .Values.initialBootstrapMode }}
      nodeSelector:
        node-role.kubernetes.io/master: ""
      {{- end }}
      {{- if or .Values.chartOperator.cni.install .Values.initialBootstrapMode }}
      hostNetwork: true
      tolerations:
      - effect: NoSchedule
        operator: Exists
      {{- else }}
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      {{- end }}
      {{- if .Values.isManagementCluster }}
      dnsPolicy: ClusterFirst
      {{- else }}
      dnsPolicy: None
      dnsConfig:
        nameservers:
        - {{ .Values.clusterDNSIP }}
        {{- range (splitList "," .Values.externalDNSIP) }}
        - {{ . }}
        {{- end }}
        searches:
        - giantswarm.svc.{{ .Values.cluster.kubernetes.domain }}
        - svc.{{ .Values.cluster.kubernetes.domain }}
        - {{ .Values.cluster.kubernetes.domain }}
        options:
        - name: ndots
          value: "5"
      initContainers:
      - name: wait-for-quay
        image: "{{ .Values.image.registry }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        command:
        - sh
        - -c
        - until dig {{ .Values.image.registry }}. {{ range (splitList "," .Values.externalDNSIP) }}@{{ . }} {{ end }}; do echo waiting for {{ .Values.image.registry }}; sleep 2; done;
        securityContext:
          runAsUser: {{ .Values.pod.user.id }}
          runAsGroup: {{ .Values.pod.group.id }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        {{- if or .Values.proxy.enabled .Values.initialBootstrapMode }}
        env:
        {{- if .Values.initialBootstrapMode }}
        - name: KUBERNETES_SERVICE_HOST
          value: 127.0.0.1
        {{- end }}
        {{- if .Values.proxy.http }}
        - name: HTTP_PROXY
          value: {{ .Values.proxy.http }}
        {{- end }}
        {{- if .Values.proxy.https }}
        - name: HTTPS_PROXY
          value: {{ .Values.proxy.https }}
        {{- end }}
        {{- if .Values.proxy.noProxy }}
        - name: NO_PROXY
          value: {{ join "," .Values.proxy.noProxy }}
        {{- end }}
        {{- end }}
        {{- if .Values.isManagementCluster }}
        image: "{{ .Values.registry.domain }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        {{- else }}
        image: "{{ .Values.image.registry }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        {{- end }}
        volumeMounts:
        - name: {{ tpl .Values.resource.default.name  . }}-configmap
          mountPath: /var/run/{{ .Chart.Name }}/configmap/
        ports:
        - name: http
          containerPort: {{ .Values.pod.port }}
        args:
        - daemon
        - --config.dirs=/var/run/{{ .Chart.Name }}/configmap/
        - --config.files=config
        securityContext:
          runAsUser: {{ .Values.pod.user.id }}
          runAsGroup: {{ .Values.pod.group.id }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.pod.port }}
          initialDelaySeconds: 15
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.pod.port }}
          initialDelaySeconds: 15
          timeoutSeconds: 1
        resources:
{{ toYaml .Values.deployment | indent 10 }}
